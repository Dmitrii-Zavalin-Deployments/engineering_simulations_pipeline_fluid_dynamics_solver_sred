name: Fluid Dynamics Calculations Pipeline

on:
  push:
    branches:
      - "**" # Triggers on any branch
  workflow_dispatch:

jobs:
  fluid_dynamics_simulation:
    runs-on: ubuntu-latest

    # Define common file paths for clarity and easier updates
    env:
      ORIGINAL_INPUT_FILE: ${{ github.workspace }}/data/testing-input-output/fluid_simulation_input.json
      # Changed to an output directory for all results
      OUTPUT_RESULTS_DIR: ${{ github.workspace }}/data/testing-output-run 
      TEMP_SOLVER_INPUT_FILE: ${{ github.workspace }}/temp/solver_input.json

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13" # Ensure consistent Python version

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest numpy # Explicitly install common scientific dependencies
        # Install jq for JSON validation
        sudo apt-get update && sudo apt-get install -y jq

    - name: List installed packages (Debugging)
      run: pip list
      
    - name: Delete Previous Fluid Simulation Input JSON
      run: |
        if [ -f "$ORIGINAL_INPUT_FILE" ]; then
          rm "$ORIGINAL_INPUT_FILE"
          echo "üóëÔ∏è Deleted previous fluid_simulation_input.json file."
        else
          echo "‚ÑπÔ∏è No previous fluid_simulation_input.json found‚Äîproceeding with new generation."
        fi
    
    - name: Make `download_from_dropbox.sh` Executable
      run: chmod +x src/download_from_dropbox.sh

    - name: Download Simulation Files from Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: src/download_from_dropbox.sh

    # Ensure original input file `fluid_simulation_input.json` exists before pre-processing
    - name: Verify Original Input File Exists
      run: |
        if [ ! -f "$ORIGINAL_INPUT_FILE" ]; then
          echo "‚ùå Error: Original input file fluid_simulation_input.json is missing at $ORIGINAL_INPUT_FILE!"
          exit 1
        fi
        echo "‚úÖ Original input file fluid_simulation_input.json found at $ORIGINAL_INPUT_FILE."

    # Debugging: Print full directory tree before running pre-processor
    - name: Debugging - List All Files in Repository Before Pre-processing
      run: ls -R "${GITHUB_WORKSPACE}"

    # --- NEW STEP: Create Temporary Directory for Solver Input ---
    - name: Create temp directory for solver input
      run: mkdir -p "$(dirname "$TEMP_SOLVER_INPUT_FILE")"

    # --- NEW STEP: Run the Pre-processing Script ---
    - name: Run Fluid Simulation Pre-processor
      run: |
        # Added PYTHONPATH to allow Python to find modules within the 'src' directory for internal imports
        PYTHONPATH="${GITHUB_WORKSPACE}/src" python "${GITHUB_WORKSPACE}/src/pre_process_input.py" "$ORIGINAL_INPUT_FILE" "$TEMP_SOLVER_INPUT_FILE"
        echo "‚úÖ Pre-processing completed. Temporary solver input generated at $TEMP_SOLVER_INPUT_FILE."
    
    # Verify the temporary file exists after pre-processing
    - name: Verify Temporary Solver Input File Exists
      run: |
        if [ ! -f "$TEMP_SOLVER_INPUT_FILE" ]; then
          echo "‚ùå Error: Temporary solver input file is missing at $TEMP_SOLVER_INPUT_FILE!"
          exit 1
        fi
        echo "‚úÖ Temporary solver input file found at $TEMP_SOLVER_INPUT_FILE."

    # --- MODIFIED STEP: Run the Main Navier-Stokes Solver (uses temp file and new output dir) ---
    - name: Run Main Navier-Stokes Solver
      run: |
        # Ensure the output results directory is clean before running
        rm -rf "$OUTPUT_RESULTS_DIR"
        mkdir -p "$OUTPUT_RESULTS_DIR"
        # Corrected PYTHONPATH to allow Python to find modules within the 'src' directory
        PYTHONPATH="${GITHUB_WORKSPACE}/src" python "${GITHUB_WORKSPACE}/src/main_solver.py" "$TEMP_SOLVER_INPUT_FILE" "$OUTPUT_RESULTS_DIR"
        echo "‚úÖ Main Navier-Stokes simulation executed successfully."

    # --- MODIFIED STEP: Verify Output Directory and Files Exist ---
    - name: Verify Output Directory and Files Exist
      run: |
        if [ ! -d "$OUTPUT_RESULTS_DIR" ]; then
          echo "‚ùå Error: Simulation output directory not found at $OUTPUT_RESULTS_DIR!"
          exit 1
        fi
        echo "‚úÖ Output directory '$OUTPUT_RESULTS_DIR' found."
        
        # Verify essential files within the output directory
        if [ ! -f "$OUTPUT_RESULTS_DIR/config.json" ]; then
          echo "‚ùå Error: config.json not found in output directory!"
          exit 1
        fi
        echo "‚úÖ config.json found."

        if [ ! -f "$OUTPUT_RESULTS_DIR/mesh.json" ]; then
          echo "‚ùå Error: mesh.json not found in output directory!"
          exit 1
        fi
        echo "‚úÖ mesh.json found."
        
        if [ ! -d "$OUTPUT_RESULTS_DIR/fields" ]; then
          echo "‚ùå Error: 'fields' subdirectory not found in output directory!"
          exit 1
        fi
        echo "‚úÖ 'fields' subdirectory found."


    # --- MODIFIED STEP: Debugging - Show Output Directory Contents ---
    - name: Debugging - Show Output Directory Contents
      run: |
        echo "üîç Output Directory Content Preview:"
        ls -R "$OUTPUT_RESULTS_DIR"

    # --- MODIFIED STEP: Validate JSON Format Before Commit ---
    - name: Verify JSON Format Before Commit
      run: |
        # Validate config.json
        if jq empty "$OUTPUT_RESULTS_DIR/config.json"; then
          echo "‚úÖ config.json is valid."
        else
          echo "‚ùå Error: config.json is malformed!"
          exit 1
        fi
        
        # Optionally, validate the first field snapshot for structure
        FIRST_SNAPSHOT="$OUTPUT_RESULTS_DIR/fields/step_0000.json"
        if [ -f "$FIRST_SNAPSHOT" ]; then
          if jq empty "$FIRST_SNAPSHOT"; then
            echo "‚úÖ First field snapshot ($FIRST_SNAPSHOT) is valid."
          else
            echo "‚ùå Error: First field snapshot ($FIRST_SNAPSHOT) is malformed!"
            exit 1
          fi
        else
          echo "‚ÑπÔ∏è First field snapshot ($FIRST_SNAPSHOT) not found to validate."
        fi


    # --- Commit and Push Updated Simulation Results (If Tests Pass) ---
    # This section remains commented as per your original request.
    # If uncommenting, remember to adjust the `RESULTS_FILE` variable
    # or adapt the git add commands to handle the directory structure.
    # - name: Commit and Push Simulation Results JSON
    #   env:
    #     GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
    #     GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
    #   run: |
    #     git config --global user.name "${GIT_USER_NAME}"
    #     git config --global user.email "${GIT_USER_EMAIL}"

    #     cd "$GITHUB_WORKSPACE"
    #     # Adjust this to add the entire output directory
    #     git add "$OUTPUT_RESULTS_DIR"
    #     git status
          
    #     if git diff --cached --quiet; then
    #       echo "‚úÖ No changes to commit in $OUTPUT_RESULTS_DIR!"
    #     else
    #       git commit -m "Auto-update: Added latest Navier-Stokes simulation results directory"
    #       git push origin HEAD
    #     fi

    - name: Make `upload_to_dropbox.sh` Executable
      run: chmod +x src/upload_to_dropbox.sh

    - name: Debug Before Dropbox Upload
      run: |
        echo "üîç Checking directory structure before upload..."
        ls -R $GITHUB_WORKSPACE

    # Note: If upload_to_dropbox.sh only handles single files, you might need to modify it
    # to upload the entire directory or specific files from within it.
    - name: Upload Fluid Simulation Input to Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: src/upload_to_dropbox.sh