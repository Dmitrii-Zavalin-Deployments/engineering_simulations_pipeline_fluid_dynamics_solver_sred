# .github/workflows/fluid_dynamics_calculations.yml

name: Fluid Dynamics Calculations Pipeline

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  fluid_dynamics_simulation:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}/src
      ORIGINAL_INPUT_FILE: ${{ github.workspace }}/data/testing-input-output/fluid_simulation_input.json
      OUTPUT_RESULTS_BASE_DIR: ${{ github.workspace }}/data/testing-output-run
      UPLOAD_DIR: ${{ github.workspace }}/data/testing-input-output/navier_stokes_output
      REFLEX_CONFIG: ${{ github.workspace }}/config/reflex_debug_config.yaml

    steps:
    - name: üóÇÔ∏è Checkout Repository
      uses: actions/checkout@v3

    - name: üêç Setup Python & Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest numpy jsonschema jq
        echo "‚úÖ Python and dependencies installed."

    - name: üì• Clean Previous Input & Download from Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: |
        rm -f "$ORIGINAL_INPUT_FILE" && echo "üóëÔ∏è Cleaned previous input." || echo "‚ÑπÔ∏è No previous input found."
        chmod +x src/download_from_dropbox.sh
        src/download_from_dropbox.sh
        [ -f "$ORIGINAL_INPUT_FILE" ] && echo "‚úÖ Original input file ready." || { echo "‚ùå Error: Input file missing."; exit 1; }

    - name: üöÄ Run Main Solver
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        REFLEX_CONFIG: ${{ env.REFLEX_CONFIG }}
      run: |
        rm -rf "$OUTPUT_RESULTS_BASE_DIR"
        mkdir -p "$OUTPUT_RESULTS_BASE_DIR"
        python src/main_solver.py "$ORIGINAL_INPUT_FILE"
        echo "‚úÖ Main solver executed without JSON serialization errors."

    - name: üß™ Run Unit Tests
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        REFLEX_CONFIG: ${{ env.REFLEX_CONFIG }}
      run: |
        pytest -s tests/ --verbose -ra
        echo "‚úÖ Unit tests completed."

    - name: üß™ Run Snapshot Validation
      run: |
        python src/tools/snapshot_validator.py
        echo "‚úÖ Snapshot validation executed."

    - name: üìä Evaluate Reflex Scoring
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        python src/ci_score_report.py
        echo "‚úÖ Reflex scoring completed."

    - name: üóÉÔ∏è Inspect Repository Structure
      run: |
        echo "üì¶ Full repository structure:"
        ls -R ${{ github.workspace }}
        echo "‚úÖ Inspection complete."

    - name: üì¶ Archive Snapshot Results
      run: |
        ZIP_SOURCE="${GITHUB_WORKSPACE}/data/testing-input-output/navier_stokes_output"
        ZIP_DEST="${GITHUB_WORKSPACE}/data/testing-output-run"
        ZIP_NAME="navier_stokes_output.zip"
        mkdir -p "$ZIP_DEST"
        cd "$ZIP_SOURCE"
        zip -rq "$ZIP_DEST/$ZIP_NAME" . || { echo "‚ùå ERROR: Archive creation failed."; exit 1; }
        echo "‚úÖ Archive created: $ZIP_NAME"

    - name: ‚òÅÔ∏è Upload to Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: |
        if [ ! -d "$UPLOAD_DIR" ]; then
          echo "‚ö†Ô∏è No upload directory at $UPLOAD_DIR ‚Äî skipping Dropbox upload."
          exit 0
        fi
        chmod +x src/upload_to_dropbox.sh
        echo "üì¶ Uploading: $UPLOAD_DIR"
        ls -R "$UPLOAD_DIR"
        src/upload_to_dropbox.sh "$UPLOAD_DIR"

    - name: üìù Log trigger for STEP processor
      run: |
        echo "$(date '+%Y-%m-%d %H:%M:%S'): STEP processor triggered by '${{ github.actor }}' via '${{ github.event_name }}' event" >> trigger.txt

    - name: üöÄ Commit and push trigger log
      env:
        GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
        GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
      run: |
        git config --global user.name "${GIT_USER_NAME}"
        git config --global user.email "${GIT_USER_EMAIL}"
        git pull --rebase origin main || echo "‚ö†Ô∏è Pull failed or not needed"
        git add trigger.txt
        git commit -m "Log STEP processor trigger by ${{ github.actor }} via ${{ github.event_name }}"
        git push



