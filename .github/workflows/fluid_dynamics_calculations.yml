name: Fluid Dynamics Calculations Pipeline

on:
  push:
    branches:
      - "**" # Triggers on any branch
  workflow_dispatch:

jobs:
  fluid_dynamics_simulation:
    runs-on: ubuntu-latest

    env:
      ORIGINAL_INPUT_FILE: ${{ github.workspace }}/data/testing-input-output/fluid_simulation_input.json
      OUTPUT_RESULTS_BASE_DIR: ${{ github.workspace }}/data/testing-output-run 
      TEMP_SOLVER_INPUT_FILE: ${{ github.workspace }}/temp/solver_input.json

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Python & Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest numpy jq # jq for JSON validation
        echo "Dependencies installed."

    - name: Clean Previous Input & Download Files
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: |
        rm -f "$ORIGINAL_INPUT_FILE" && echo "üóëÔ∏è Cleaned previous input (if existed)." || echo "‚ÑπÔ∏è No previous input to clean."
        chmod +x src/download_from_dropbox.sh
        src/download_from_dropbox.sh
        [ -f "$ORIGINAL_INPUT_FILE" ] && echo "‚úÖ Original input file found." || { echo "‚ùå Error: Original input file missing!"; exit 1; }

    - name: Run Pre-processor
      run: |
        mkdir -p "$(dirname "$TEMP_SOLVER_INPUT_FILE")"
        PYTHONPATH="${GITHUB_WORKSPACE}/src" python "${GITHUB_WORKSPACE}/src/pre_process_input.py" "$ORIGINAL_INPUT_FILE" "$TEMP_SOLVER_INPUT_FILE"
        [ -f "$TEMP_SOLVER_INPUT_FILE" ] && echo "‚úÖ Pre-processing completed." || { echo "‚ùå Error: Temporary solver input file missing!"; exit 1; }

    - name: Run Main Solver
      run: |
        rm -rf "$OUTPUT_RESULTS_BASE_DIR" # Clean base output dir
        mkdir -p "$OUTPUT_RESULTS_BASE_DIR" # Recreate base output dir
        # The Python script creates 'navier_stokes_output' inside OUTPUT_RESULTS_BASE_DIR
        PYTHONPATH="${GITHUB_WORKSPACE}/src" python "${GITHUB_WORKSPACE}/src/main_solver.py" "$TEMP_SOLVER_INPUT_FILE" "$OUTPUT_RESULTS_BASE_DIR"
        echo "‚úÖ Main simulation executed."

    - name: Verify Output & Validate JSON
      run: |
        ACTUAL_OUTPUT_DIR="$OUTPUT_RESULTS_BASE_DIR/navier_stokes_output"
        [ -d "$ACTUAL_OUTPUT_DIR" ] && echo "‚úÖ Output dir '$ACTUAL_OUTPUT_DIR' found." || { echo "‚ùå Error: Output dir not found!"; exit 1; }
        [ -f "$ACTUAL_OUTPUT_DIR/config.json" ] && echo "‚úÖ config.json found & valid." || { echo "‚ùå Error: config.json not found or malformed!"; exit 1; }
        [ -f "$ACTUAL_OUTPUT_DIR/mesh.json" ] && echo "‚úÖ mesh.json found." || { echo "‚ùå Error: mesh.json not found!"; exit 1; }
        [ -d "$ACTUAL_OUTPUT_DIR/fields" ] && echo "‚úÖ 'fields' subdirectory found." || { echo "‚ùå Error: 'fields' dir not found!"; exit 1; }
        
        echo "üîç Output Directory Content Preview:"
        ls -R "$ACTUAL_OUTPUT_DIR"
        
        # Validate config.json - using jq's exit code for validation
        jq empty "$ACTUAL_OUTPUT_DIR/config.json" || { echo "‚ùå Error: config.json is malformed!"; exit 1; }
        
        FIRST_SNAPSHOT="$ACTUAL_OUTPUT_DIR/fields/step_0000.json"
        if [ -f "$FIRST_SNAPSHOT" ]; then
          jq empty "$FIRST_SNAPSHOT" || { echo "‚ùå Error: First snapshot is malformed!"; exit 1; }
        else
          echo "‚ÑπÔ∏è First snapshot not found to validate (expected for very short runs)."
        fi

    - name: Upload Results to Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        UPLOAD_DIR: ${{ env.OUTPUT_RESULTS_BASE_DIR }}/navier_stokes_output 
      run: |
        chmod +x src/upload_to_dropbox.sh
        echo "üîç Uploading contents of: $UPLOAD_DIR"
        ls -R "$UPLOAD_DIR" # Show what's actually being uploaded
        # IMPORTANT: Ensure your upload_to_dropbox.sh script can handle a directory as an argument.
        src/upload_to_dropbox.sh "$UPLOAD_DIR"