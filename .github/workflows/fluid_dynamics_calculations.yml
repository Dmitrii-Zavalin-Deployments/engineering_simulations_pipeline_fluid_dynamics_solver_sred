# .github/workflows/fluid_dynamics_calculations.yml

name: Fluid Dynamics Calculations Pipeline

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  code_quality_check:
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: üêç Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üßπ Run autoflake to remove unused imports
        run: |
          pip install autoflake
          autoflake --in-place --recursive --remove-unused-variables --remove-all-unused-imports src

      - name: üíÄ Run vulture to find dead code
        run: |
          pip install vulture
          vulture src || echo "‚ö†Ô∏è Vulture found unused code ‚Äî review manually if needed"

      - name: üß† Run radon for cyclomatic complexity and maintainability
        run: |
          pip install radon
          radon cc src -nc
          radon mi src

      - name: üîê Run Bandit for security checks
        run: |
          pip install bandit
          bandit -r src || echo "‚ö†Ô∏è Bandit found security issues ‚Äî review manually if needed"

      - name: üß† Run mypy for type checking
        run: |
          pip install mypy
          mypy src || echo "‚ö†Ô∏è Mypy found type issues ‚Äî review manually if needed"

      - name: üîç Run flake8 for linting and code smells
        run: |
          pip install flake8
          flake8 src --exit-zero --max-complexity=10 --statistics

      - name: üöÄ Commit autoflake changes
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"
          git add .
          git diff --cached --quiet || (
            git commit -m "üßπ Auto-clean: removed unused imports and variables"
            git push || echo "No changes to push"
          )

  fluid_dynamics_simulation:
    needs: code_quality_check
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}/src
      ORIGINAL_INPUT_FILE: ${{ github.workspace }}/data/testing-input-output/fluid_simulation_input.json
      OUTPUT_RESULTS_BASE_DIR: ${{ github.workspace }}/data/testing-output-run
      UPLOAD_DIR: ${{ github.workspace }}/data/testing-input-output/navier_stokes_output
      REFLEX_CONFIG: ${{ github.workspace }}/config/reflex_debug_config.yaml
      DEBUG_MODE: true

    steps:
    - name: üóÇÔ∏è Checkout Repository
      uses: actions/checkout@v3

    - name: üêç Setup Python & Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest numpy jsonschema jq
        echo "‚úÖ Python and dependencies installed."

    - name: üì• Clean Previous Input & Download from Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: |
        rm -f "$ORIGINAL_INPUT_FILE" && echo "üóëÔ∏è Cleaned previous input." || echo "‚ÑπÔ∏è No previous input found."
        chmod +x src/download_from_dropbox.sh
        src/download_from_dropbox.sh
        [ -f "$ORIGINAL_INPUT_FILE" ] && echo "‚úÖ Original input file ready." || { echo "‚ùå Error: Input file missing."; exit 1; }

    - name: üßπ Cleanup previous diagnostic snapshots
      run: |
        rm -f data/snapshots/* || echo "‚ö†Ô∏è No previous snapshots to remove"
    
    - name: üßπ Cleanup previous diagnostic velocities
      run: |
        rm -f data/velocities/*.json || echo "‚ö†Ô∏è No velocity snapshots to remove"

    - name: üìã Validate Input Schema
      run: |
        python src/tools/schema_validator.py "$ORIGINAL_INPUT_FILE" || {
          echo "‚ùå Input schema validation failed."; exit 1;
        }

    - name: üß™ Run Unit Tests with Coverage
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # ‚úÖ Clean Python cache to avoid import mismatches
        find . -name "*.pyc" -delete
        find . -type d -name "__pycache__" -exec rm -r {} +
        
        pytest --cov=src --cov-report=term-missing -s tests/ --verbose -ra
        echo "‚úÖ Unit tests and code coverage check completed."
      
    # - name: üöÄ Run Main Solver
    #   env:
    #     PYTHONPATH: ${{ github.workspace }}/src
    #     REFLEX_CONFIG: ${{ env.REFLEX_CONFIG }}
    #   run: |
    #     rm -rf "$OUTPUT_RESULTS_BASE_DIR"
    #     mkdir -p "$OUTPUT_RESULTS_BASE_DIR"
    #     python src/main_solver.py "$ORIGINAL_INPUT_FILE"
    #     echo "‚úÖ Main solver executed."

    # - name: üß™ Run Snapshot Validation
    #   run: |
    #     python src/tools/snapshot_validator.py
    #     echo "‚úÖ Snapshot validation executed."

    # - name: üìä Evaluate Reflex Scoring
    #   env:
    #     PYTHONPATH: ${{ github.workspace }}/src
    #   run: |
    #     python src/ci_score_report.py
    #     echo "‚úÖ Reflex scoring completed."

    - name: üóÉÔ∏è Inspect Repository Structure
      run: |
        echo "üì¶ Full repository structure:"
        ls -R ${{ github.workspace }}
        echo "‚úÖ Inspection complete."

    - name: ‚òÅÔ∏è Upload to Dropbox
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: |
        if [ ! -d "$UPLOAD_DIR" ]; then
          echo "‚ö†Ô∏è No upload directory at $UPLOAD_DIR ‚Äî skipping Dropbox upload."
          exit 0
        fi
        chmod +x src/upload_to_dropbox.sh
        echo "üì¶ Uploading: $UPLOAD_DIR"
        ls -R "$UPLOAD_DIR"
        src/upload_to_dropbox.sh "$UPLOAD_DIR"

    - name: üìù Log trigger for STEP processor
      run: |
        echo "$(date '+%Y-%m-%d %H:%M:%S'): STEP processor triggered by '${{ github.actor }}' via '${{ github.event_name }}' event" >> trigger.txt

    - name: üìÇ List diagnostic folders and contents
      if: always()
      run: |
        echo "üìÅ Directory structure before commit:"
        ls -R
        echo "‚úÖ Directory listing complete."
    
    - name: üìù Log trigger & push
      if: always() # Run even if previous steps failed to ensure log and diagnostics are committed
      env:
        GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
        GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
      run: |
        echo "$(date '+%Y-%m-%d %H:%M:%S'): STEP processor triggered by '${{ github.actor }}' via '${{ github.event_name }}' event" >> trigger.txt
        git config --global user.name "${GIT_USER_NAME}"
        git config --global user.email "${GIT_USER_EMAIL}"

        # Commit diagnostic snapshots if present
        if [ -d "data/snapshots" ]; then
          git add --force data/snapshots
          echo "üì∏ Added diagnostic snapshots for commit."
        fi

        git add trigger.txt
        git commit -m "Log STEP processor trigger by ${{ github.actor }} via ${{ github.event_name }}" || echo "No new log or snapshots to commit"

        # Stash any remaining changes to avoid rebase failure
        git stash push -m "Temp stash before rebase" || echo "No changes to stash"

        # Pull and rebase safely
        git pull --rebase origin main || echo "‚ö†Ô∏è Rebase failed ‚Äî check for conflicts"

        # Restore stash if it exists
        git stash list | grep "Temp stash before rebase" && git stash pop || echo "No stash to restore"

        # Push changes
        git push origin main || echo "‚ùå Push failed ‚Äî remote may have diverged"


